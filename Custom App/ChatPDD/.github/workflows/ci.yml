name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate
        env:
          DATABASE_URL: "postgresql://placeholder:placeholder@localhost:5432/placeholder"

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Run ESLint
        run: pnpm lint

      - name: Check build
        run: pnpm build
        env:
          DATABASE_URL: "postgresql://placeholder:placeholder@localhost:5432/placeholder"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerable dependencies
        run: npx audit-ci --moderate

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for large files
        run: |
          find . -type f -size +500k ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./pnpm-lock.yaml" ! -path "./.next/*" | head -10
          if find . -type f -size +500k ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./pnpm-lock.yaml" ! -path "./.next/*" | grep -q .; then
            echo "Warning: Large files detected"
            find . -type f -size +500k ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./pnpm-lock.yaml" ! -path "./.next/*" -exec ls -lh {} \;
          fi

      - name: Check code complexity
        run: |
          echo "Checking for overly complex files..."
          find . -name "*.ts" -o -name "*.tsx" ! -path "./node_modules/*" ! -path "./.next/*" | xargs wc -l | sort -n | tail -10

  status-check:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, security-scan, code-quality]
    if: always()

    steps:
      - name: Check CI results
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" &&
                "${{ needs.security-scan.result }}" == "success" &&
                ("${{ needs.code-quality.result }}" == "success" || "${{ needs.code-quality.result }}" == "skipped") ]]; then
            echo "✅ All CI checks passed"
            exit 0
          else
            echo "❌ CI checks failed"
            echo "Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
            echo "Security Scan: ${{ needs.security-scan.result }}"
            echo "Code Quality: ${{ needs.code-quality.result }}"
            exit 1
          fi
