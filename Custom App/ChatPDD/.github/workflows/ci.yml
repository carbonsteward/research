name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate
        env:
          DATABASE_URL: "postgresql://placeholder:placeholder@localhost:5432/placeholder"

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Run ESLint
        run: pnpm lint

      - name: Check build
        run: pnpm build
        env:
          DATABASE_URL: "postgresql://placeholder:placeholder@localhost:5432/placeholder"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerable dependencies
        run: npx audit-ci --moderate

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check for large files
        run: |
          find . -type f -size +500k ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./pnpm-lock.yaml" ! -path "./.next/*" | head -10
          if find . -type f -size +500k ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./pnpm-lock.yaml" ! -path "./.next/*" | grep -q .; then
            echo "Warning: Large files detected"
            find . -type f -size +500k ! -path "./node_modules/*" ! -path "./.git/*" ! -path "./pnpm-lock.yaml" ! -path "./.next/*" -exec ls -lh {} \;
          fi

      - name: Check code complexity
        run: |
          echo "Checking for overly complex files..."
          find . -name "*.ts" -o -name "*.tsx" ! -path "./node_modules/*" ! -path "./.next/*" | xargs wc -l | sort -n | tail -10

  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: chatpdd_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          pnpm db:generate
          pnpm db:push
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"

      - name: Run unit tests
        run: pnpm test --coverage --passWithNoTests
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: chatpdd_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Setup test database
        run: |
          pnpm db:generate
          pnpm db:push
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_e2e"

      - name: Build application
        run: pnpm build
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_e2e"

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_e2e"
          BASE_URL: "http://localhost:3000"

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'pull_request'
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports
          path: ./coverage/

      - name: Coverage analysis
        run: |
          echo "üìä Test Coverage Analysis"
          if [ -f "./coverage/lcov.info" ]; then
            echo "Coverage report found"
            # Add coverage threshold checking here
            echo "‚úÖ Coverage analysis complete"
          else
            echo "‚ö†Ô∏è No coverage report found"
          fi

  status-check:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, security-scan, code-quality, unit-tests, e2e-tests]
    if: always()

    steps:
      - name: Check CI results
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" &&
                "${{ needs.security-scan.result }}" == "success" &&
                "${{ needs.unit-tests.result }}" == "success" &&
                "${{ needs.e2e-tests.result }}" == "success" &&
                ("${{ needs.code-quality.result }}" == "success" || "${{ needs.code-quality.result }}" == "skipped") ]]; then
            echo "‚úÖ All CI checks passed"
            echo "üìä Pipeline Summary:"
            echo "  - Lint & Type Check: ‚úÖ ${{ needs.lint-and-typecheck.result }}"
            echo "  - Security Scan: ‚úÖ ${{ needs.security-scan.result }}"
            echo "  - Unit Tests: ‚úÖ ${{ needs.unit-tests.result }}"
            echo "  - E2E Tests: ‚úÖ ${{ needs.e2e-tests.result }}"
            echo "  - Code Quality: ‚úÖ ${{ needs.code-quality.result }}"
            exit 0
          else
            echo "‚ùå CI pipeline failed"
            echo "üìä Pipeline Results:"
            echo "  - Lint & Type Check: ${{ needs.lint-and-typecheck.result }}"
            echo "  - Security Scan: ${{ needs.security-scan.result }}"
            echo "  - Unit Tests: ${{ needs.unit-tests.result }}"
            echo "  - E2E Tests: ${{ needs.e2e-tests.result }}"
            echo "  - Code Quality: ${{ needs.code-quality.result }}"
            exit 1
          fi
