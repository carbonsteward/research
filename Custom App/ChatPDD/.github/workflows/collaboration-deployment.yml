name: Collaboration Features Deployment

on:
  push:
    branches: [main, develop]
    paths:
      - 'app/api/collaboration/**'
      - 'app/api/teams/**'
      - 'app/api/workspaces/**'
      - 'app/api/notifications/**'
      - 'components/collaboration/**'
      - 'lib/collaboration/**'
      - 'prisma/schema.prisma'
      - 'types/collaboration.ts'

  pull_request:
    branches: [main, develop]
    paths:
      - 'app/api/collaboration/**'
      - 'app/api/teams/**'
      - 'app/api/workspaces/**'
      - 'app/api/notifications/**'
      - 'components/collaboration/**'
      - 'lib/collaboration/**'
      - 'prisma/schema.prisma'
      - 'types/collaboration.ts'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip-tests:
        description: 'Skip collaboration tests'
        required: false
        type: boolean
        default: false
      enable-performance-testing:
        description: 'Run performance tests for collaboration features'
        required: false
        type: boolean
        default: true

concurrency:
  group: collaboration-deployment-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  collaboration-tests:
    name: Collaboration Feature Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.skip-tests != 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chatpdd_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          pnpm db:generate
          pnpm db:push
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"

      - name: Seed collaboration test data
        run: |
          pnpm tsx scripts/seed-collaboration-test-data.ts
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"

      - name: Run collaboration unit tests
        run: |
          pnpm test --testPathPattern="collaboration|team|workspace|notification" --coverage
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"
          JWT_SECRET: "test-jwt-secret"
          NEXTAUTH_SECRET: "test-nextauth-secret"

      - name: Run real-time feature tests
        run: |
          pnpm test --testPathPattern="websocket|realtime" --coverage
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"
          ENABLE_WEBSOCKETS: "true"
          WEBSOCKET_PORT: "3001"

      - name: Run API integration tests
        run: |
          pnpm test:integration --testPathPattern="api.*collaboration"
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"
          NEXT_PUBLIC_APP_URL: "http://localhost:3000"

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: collaboration-features
          name: collaboration-coverage

  collaboration-e2e-tests:
    name: Collaboration E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.ref == 'refs/heads/main' || github.event.inputs.enable-performance-testing == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chatpdd_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm playwright install --with-deps

      - name: Setup test database and build app
        run: |
          pnpm db:generate
          pnpm db:push
          pnpm build
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"
          NEXT_PUBLIC_APP_URL: "http://localhost:3000"
          NEXT_PUBLIC_ENABLE_REAL_TIME: "true"
          ENABLE_WEBSOCKETS: "true"

      - name: Start application
        run: |
          pnpm start &
          sleep 10
          curl -f http://localhost:3000/api/health || exit 1
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"
          PORT: 3000

      - name: Run collaboration E2E tests
        run: |
          pnpm playwright test --grep="collaboration|team|workspace" --reporter=html
        env:
          BASE_URL: "http://localhost:3000"
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: collaboration-e2e-results
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  performance-tests:
    name: Collaboration Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.enable-performance-testing == 'true' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chatpdd_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup performance test environment
        run: |
          pnpm db:generate
          pnpm db:push
          pnpm tsx scripts/seed-performance-test-data.ts
          pnpm build
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"

      - name: Start application for performance testing
        run: |
          pnpm start &
          sleep 15
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"
          ENABLE_WEBSOCKETS: "true"
          CACHE_STRATEGY: "redis"

      - name: Run collaboration performance tests
        run: |
          echo "🚀 Running collaboration performance tests..."

          # Test concurrent team member operations
          pnpm tsx scripts/performance-tests/team-collaboration.ts

          # Test workspace scaling
          pnpm tsx scripts/performance-tests/workspace-scaling.ts

          # Test real-time notification performance
          pnpm tsx scripts/performance-tests/notification-load.ts

          # Test file upload/sharing performance
          pnpm tsx scripts/performance-tests/file-sharing.ts
        env:
          BASE_URL: "http://localhost:3000"
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/chatpdd_test"
          REDIS_URL: "redis://localhost:6379"

      - name: Analyze performance results
        run: |
          echo "📊 Performance Test Results"
          echo "==========================="
          cat performance-results.json || echo "No performance results found"

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: collaboration-performance-results
          path: |
            performance-results.json
            performance-logs/
          retention-days: 30

  security-tests:
    name: Collaboration Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for collaboration-specific vulnerabilities
        run: |
          echo "🔒 Running collaboration security tests..."

          # Check for authentication bypass vulnerabilities
          pnpm tsx scripts/security-tests/auth-bypass.ts

          # Test permission escalation scenarios
          pnpm tsx scripts/security-tests/permission-escalation.ts

          # Verify input sanitization in collaboration features
          pnpm tsx scripts/security-tests/input-sanitization.ts

          # Test file upload security
          pnpm tsx scripts/security-tests/file-upload-security.ts

      - name: OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 3 -T 5'

  deployment-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [collaboration-tests, security-tests]
    if: github.ref == 'refs/heads/develop' || (github.event.inputs.environment == 'staging' && github.event_name == 'workflow_dispatch')
    timeout-minutes: 15
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run staging database migration
        uses: ./.github/workflows/database-migration.yml
        with:
          environment: staging
          migration-strategy: standard
          enable-backup: true
        secrets:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Build for staging
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_ENV: staging
          NEXT_PUBLIC_APP_URL: ${{ secrets.STAGING_APP_URL }}
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          NEXT_PUBLIC_ENABLE_REAL_TIME: "true"
          ENABLE_WEBSOCKETS: "true"

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--env NODE_ENV=production --env NEXT_PUBLIC_APP_ENV=staging'

      - name: Staging health check
        run: |
          echo "⏳ Waiting for staging deployment..."
          sleep 30

          echo "🔍 Running staging health checks..."
          curl -f ${{ secrets.STAGING_APP_URL }}/api/health
          curl -f ${{ secrets.STAGING_APP_URL }}/api/collaboration/health

          echo "✅ Staging deployment health check passed"

      - name: Run staging smoke tests
        run: |
          echo "🚀 Running collaboration smoke tests on staging..."
          pnpm tsx scripts/smoke-tests/collaboration-features.ts
        env:
          BASE_URL: ${{ secrets.STAGING_APP_URL }}
          TEST_USER_EMAIL: ${{ secrets.STAGING_TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.STAGING_TEST_USER_PASSWORD }}

  deployment-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [collaboration-tests, collaboration-e2e-tests, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main' || (github.event.inputs.environment == 'production' && github.event_name == 'workflow_dispatch')
    timeout-minutes: 30
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run production database migration
        uses: ./.github/workflows/database-migration.yml
        with:
          environment: production
          migration-strategy: zero-downtime
          enable-backup: true
        secrets:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          BACKUP_STORAGE_URL: ${{ secrets.PRODUCTION_BACKUP_STORAGE_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SENTRY_DSN: ${{ secrets.PRODUCTION_SENTRY_DSN }}

      - name: Build for production
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_ENV: production
          NEXT_PUBLIC_APP_URL: ${{ secrets.PRODUCTION_APP_URL }}
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
          NEXT_PUBLIC_ENABLE_REAL_TIME: "true"
          ENABLE_WEBSOCKETS: "true"
          ENABLE_COMPRESSION: "true"
          ENABLE_CDN_OPTIMIZATION: "true"

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod --env NODE_ENV=production'

      - name: Production health check with retries
        run: |
          echo "⏳ Waiting for production deployment..."
          sleep 60

          echo "🔍 Running comprehensive production health checks..."

          # Retry logic for health checks
          for i in {1..5}; do
            if curl -f ${{ secrets.PRODUCTION_APP_URL }}/api/health &&
               curl -f ${{ secrets.PRODUCTION_APP_URL }}/api/collaboration/health; then
              echo "✅ Production health check passed on attempt $i"
              break
            else
              echo "⚠️ Health check failed on attempt $i, retrying..."
              sleep 30
            fi

            if [ $i -eq 5 ]; then
              echo "❌ Production health check failed after 5 attempts"
              exit 1
            fi
          done

      - name: Warm up collaboration features
        run: |
          echo "🔥 Warming up collaboration features..."
          curl -s ${{ secrets.PRODUCTION_APP_URL }}/api/workspaces > /dev/null
          curl -s ${{ secrets.PRODUCTION_APP_URL }}/api/teams > /dev/null
          curl -s ${{ secrets.PRODUCTION_APP_URL }}/api/notifications > /dev/null
          echo "✅ Feature warm-up completed"

      - name: Run production verification tests
        run: |
          echo "🧪 Running production verification tests..."
          pnpm tsx scripts/production-tests/collaboration-verification.ts
        env:
          BASE_URL: ${{ secrets.PRODUCTION_APP_URL }}
          VERIFY_COLLABORATION_FEATURES: "true"

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deployment-staging, deployment-production]
    if: always()

    steps:
      - name: Determine deployment status
        id: status
        run: |
          staging_result="${{ needs.deployment-staging.result }}"
          production_result="${{ needs.deployment-production.result }}"

          if [[ "$staging_result" == "success" || "$production_result" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT

            if [[ "$production_result" == "success" ]]; then
              echo "environment=production" >> $GITHUB_OUTPUT
              echo "url=${{ secrets.PRODUCTION_APP_URL }}" >> $GITHUB_OUTPUT
            else
              echo "environment=staging" >> $GITHUB_OUTPUT
              echo "url=${{ secrets.STAGING_APP_URL }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

      - name: Send deployment notification
        if: steps.status.outputs.status == 'success'
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{
                "text": "🚀 ChatPDD Collaboration Features Deployed Successfully",
                "attachments": [
                  {
                    "color": "good",
                    "fields": [
                      {"title": "Environment", "value": "${{ steps.status.outputs.environment }}", "short": true},
                      {"title": "URL", "value": "${{ steps.status.outputs.url }}", "short": true},
                      {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                      {"title": "Actor", "value": "${{ github.actor }}", "short": true}
                    ]
                  }
                ]
              }' \
              ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
