// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Carbon Standards - Core certification bodies and standards
model CarbonStandard {
  id                           String   @id @default(cuid()) @map("standard_id")
  name                         String   @unique
  abbreviation                 String?
  introducingEntity            String?  @map("introducing_entity")
  organizationType             String?  @map("organization_type")
  geographicScope              String?  @map("geographic_scope")
  focusSector                  String?  @map("focus_sector")
  description                  String?
  websiteUrl                   String?  @map("website_url")
  icroaApproved                Boolean  @default(false) @map("icroa_approved")
  corsiaApproved               Boolean  @default(false) @map("corsia_approved")
  correspondingAdjustmentLabel String?  @map("corresponding_adjustment_label")
  totalMethodologies           Int      @default(0) @map("total_methodologies")
  lastUpdated                  DateTime @default(now()) @updatedAt @map("last_updated")
  createdAt                    DateTime @default(now()) @map("created_at")

  // Relationships
  methodologies        Methodology[]
  pddRequirements      PDDRequirement[]
  certificationProcess CertificationProcess[]

  @@map("CarbonStandard")
  @@index([name])
  @@index([organizationType])
  @@index([geographicScope])
  @@index([focusSector])
}

// Methodologies - Specific carbon project methodologies
model Methodology {
  id              String   @id @default(cuid()) @map("methodology_id")
  standardId      String   @map("standard_id")
  name            String
  type            String?
  category        String?
  link            String?
  itmoAcceptance  Boolean  @default(false) @map("itmo_acceptance")
  description     String?
  lastUpdated     DateTime @default(now()) @updatedAt @map("last_updated")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relationships
  standard        CarbonStandard     @relation(fields: [standardId], references: [id], onDelete: Cascade)
  pddRequirements PDDRequirement[]
  projects        Project[]
  riskAssessments RiskAssessment[]

  @@map("Methodology")
  @@unique([standardId, name]) // Prevent duplicate methodology names within same standard
  @@index([standardId])
  @@index([type])
  @@index([category])
  @@index([itmoAcceptance])
}

// PDD Requirements - Project Design Document requirements
model PDDRequirement {
  id            String   @id @default(cuid()) @map("requirement_id")
  standardId    String?  @map("standard_id")
  methodologyId String?  @map("methodology_id")
  sectionName   String?  @map("section_name")
  description   String?
  required      Boolean  @default(true)
  guidanceNotes String?  @map("guidance_notes")
  templateUrl   String?  @map("template_url")
  lastUpdated   DateTime @default(now()) @updatedAt @map("last_updated")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relationships
  standard    CarbonStandard? @relation(fields: [standardId], references: [id], onDelete: Cascade)
  methodology Methodology?    @relation(fields: [methodologyId], references: [id], onDelete: Cascade)

  @@map("PDDRequirement")
  @@index([standardId])
  @@index([methodologyId])
  @@index([required])
}

// Certification Process - Step-by-step certification workflows
model CertificationProcess {
  id                     String   @id @default(cuid()) @map("process_id")
  standardId             String   @map("standard_id")
  stepNumber             Int      @map("step_number")
  stepName               String?  @map("step_name")
  description            String?
  estimatedDuration      String?  @map("estimated_duration")
  estimatedCost          String?  @map("estimated_cost")
  responsibleParty       String?  @map("responsible_party")
  documentationRequired  String?  @map("documentation_required")
  lastUpdated            DateTime @default(now()) @updatedAt @map("last_updated")
  createdAt              DateTime @default(now()) @map("created_at")

  // Relationships
  standard CarbonStandard @relation(fields: [standardId], references: [id], onDelete: Cascade)

  @@map("CertificationProcess")
  @@unique([standardId, stepNumber]) // Prevent duplicate step numbers within same standard
  @@index([standardId])
  @@index([stepNumber])
}

// Enhanced Models for ChatPDD Functionality

// User Profiles - Project developers, investors, analysts
model UserProfile {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  profileType   UserProfileType @map("profile_type")
  organization  String?
  country       String?
  region        String?
  expertise     String[] // Array of expertise areas
  preferences   Json? // User preferences as JSON
  isActive      Boolean         @default(true) @map("is_active")
  emailVerified Boolean         @default(false) @map("email_verified")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map("updated_at")

  // Relationships
  projects      Project[]
  roles         UserRole[]
  permissions   UserPermission[]
  sessions      UserSession[]
  organizations OrganizationMember[]

  @@map("UserProfile")
  @@index([profileType])
  @@index([country])
  @@index([isActive])
  @@index([email])
}

// RBAC Models

// Roles - Define system roles
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  level       Int      @default(0) // Role hierarchy level
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("Role")
  @@index([name])
  @@index([level])
  @@index([isActive])
}

// Permissions - Define granular permissions
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  resource    String   // e.g., "project", "methodology", "user"
  action      String   // e.g., "create", "read", "update", "delete"
  scope       String?  // e.g., "own", "organization", "global"
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@map("Permission")
  @@unique([resource, action, scope])
  @@index([resource])
  @@index([action])
  @@index([isActive])
}

// User Role Assignment
model UserRole {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("UserRole")
  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@index([isActive])
}

// Role Permission Assignment
model RolePermission {
  id           String   @id @default(cuid())
  roleId       String   @map("role_id")
  permissionId String   @map("permission_id")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@map("RolePermission")
  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@index([isActive])
}

// User Permission Override (for exceptions)
model UserPermission {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  permissionId String   @map("permission_id")
  granted      Boolean  @default(true) // true = granted, false = denied
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@map("UserPermission")
  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
  @@index([granted])
  @@index([isActive])
}

// User Sessions for authentication tracking
model UserSession {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  sessionToken String   @unique @map("session_token")
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  isActive    Boolean   @default(true) @map("is_active")
  expiresAt   DateTime  @map("expires_at")
  lastActivity DateTime @default(now()) @map("last_activity")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relationships
  user UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserSession")
  @@index([userId])
  @@index([sessionToken])
  @@index([isActive])
  @@index([expiresAt])
}

// Organization management for multi-tenancy
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean  @default(true) @map("is_active")
  settings    Json?    // Organization-specific settings
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  // Relationships
  members OrganizationMember[]

  @@map("Organization")
  @@index([slug])
  @@index([isActive])
}

// Organization membership
model OrganizationMember {
  id             String         @id @default(cuid())
  organizationId String         @map("organization_id")
  userId         String         @map("user_id")
  role           OrganizationRole @default(MEMBER)
  isActive       Boolean        @default(true) @map("is_active")
  joinedAt       DateTime       @default(now()) @map("joined_at")
  updatedAt      DateTime       @default(now()) @updatedAt @map("updated_at")

  // Relationships
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         UserProfile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("OrganizationMember")
  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
  @@index([role])
  @@index([isActive])
}

// Projects - Carbon mitigation projects
model Project {
  id                String          @id @default(cuid())
  userId            String          @map("user_id")
  name              String
  description       String?
  projectType       ProjectType     @map("project_type")
  status            ProjectStatus   @default(PLANNING)
  country           String
  region            String?
  coordinates       String? // "lat,lng" format
  estimatedCredits  Int? // Estimated carbon credits
  budget            Decimal? // Project budget
  timeline          String? // Project timeline
  methodologyId     String?         @map("methodology_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @default(now()) @updatedAt @map("updated_at")

  // Relationships
  user                      UserProfile                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  methodology               Methodology?                  @relation(fields: [methodologyId], references: [id])
  riskAssessments           RiskAssessment[]
  satelliteAnalyses         SatelliteAnalysis[]
  documentAnalyses          DocumentAnalysis[]
  policyComplianceAssessments PolicyComplianceAssessment[]
  milestones                ProjectMilestone[]
  impactMeasurements        ImpactMeasurement[]

  @@map("Project")
  @@index([userId])
  @@index([projectType])
  @@index([status])
  @@index([country])
  @@index([methodologyId])
}

// Risk Assessments - Climate and transitional risk evaluations
model RiskAssessment {
  id               String           @id @default(cuid())
  projectId        String           @map("project_id")
  methodologyId    String?          @map("methodology_id")
  riskType         RiskType         @map("risk_type")
  riskLevel        RiskLevel        @map("risk_level")
  riskCategory     String           @map("risk_category")
  description      String
  mitigationSteps  String[]         @map("mitigation_steps")
  confidence       Decimal          @db.Decimal(3, 2) // 0.00 to 1.00
  dataSource       String           @map("data_source")
  assessmentDate   DateTime         @default(now()) @map("assessment_date")
  validUntil       DateTime?        @map("valid_until")
  createdAt        DateTime         @default(now()) @map("created_at")

  // Relationships
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  methodology Methodology? @relation(fields: [methodologyId], references: [id])

  @@map("RiskAssessment")
  @@index([projectId])
  @@index([methodologyId])
  @@index([riskType])
  @@index([riskLevel])
  @@index([assessmentDate])
}

// Climate Policies - Regulatory and policy information
model Policy {
  id              String        @id @default(cuid())
  title           String
  description     String
  countryCode     String        @map("country_code")
  regionCode      String?       @map("region_code")
  effectiveDate   DateTime      @map("effective_date")
  expirationDate  DateTime?     @map("expiration_date")
  policyType      PolicyType    @map("policy_type")
  status          PolicyStatus  @default(ACTIVE)
  source          String
  sourceUrl       String        @map("source_url")
  sectors         String[] // Array of applicable sectors
  impact          String? // Impact description
  compliance      String? // Compliance requirements
  lastUpdated     DateTime      @default(now()) @updatedAt @map("last_updated")
  createdAt       DateTime      @default(now()) @map("created_at")

  @@map("Policy")
  @@index([countryCode])
  @@index([regionCode])
  @@index([policyType])
  @@index([status])
  @@index([effectiveDate])
  @@index([expirationDate])
}

// Physical Risk Scenarios - Climate scenario data
model PhysicalRiskScenario {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  source      String
  timeHorizon String   @map("time_horizon") // e.g., "2030", "2050", "2100"
  ssp         String? // Shared Socioeconomic Pathway
  rcp         String? // Representative Concentration Pathway
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  riskData PhysicalRiskData[]

  @@map("PhysicalRiskScenario")
  @@index([timeHorizon])
  @@index([ssp])
  @@index([rcp])
}

// Physical Risk Variables - Types of climate risks
model PhysicalRiskVariable {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  unit        String?
  category    String? // e.g., "temperature", "precipitation", "extreme_events"
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  riskData PhysicalRiskData[]

  @@map("PhysicalRiskVariable")
  @@index([category])
}

// Physical Risk Data - Actual climate risk data points
model PhysicalRiskData {
  id          String   @id @default(cuid())
  scenarioId  String   @map("scenario_id")
  variableId  String   @map("variable_id")
  countryCode String   @map("country_code")
  regionCode  String?  @map("region_code")
  latitude    String?
  longitude   String?
  timePeriod  String   @map("time_period") // e.g., "2020-2030"
  value       String
  confidence  Decimal  @db.Decimal(3, 2) // 0.00 to 1.00
  dataSource  String   @map("data_source")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relationships
  scenario PhysicalRiskScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  variable PhysicalRiskVariable @relation(fields: [variableId], references: [id], onDelete: Cascade)

  @@map("PhysicalRiskData")
  @@unique([scenarioId, variableId, countryCode, regionCode, timePeriod])
  @@index([scenarioId])
  @@index([variableId])
  @@index([countryCode])
  @@index([regionCode])
  @@index([timePeriod])
}

// Enhanced Models for Advanced AI Analysis Features

// Satellite Analysis - Satellite imagery analysis results
model SatelliteAnalysis {
  id              String              @id @default(cuid())
  projectId       String              @map("project_id")
  analysisDate    DateTime            @default(now()) @map("analysis_date")
  coordinates     String              // Center coordinates "lat,lng"
  analysisArea    Int                 // Area in hectares
  dataSource      String              @map("data_source") // e.g., "Sentinel-2", "Landsat-8"
  resolution      String              // e.g., "10m", "30m"
  cloudCover      Int                 // Percentage
  overallRisk     RiskLevel           @map("overall_risk")
  qualityScore    Int                 @map("quality_score") // 0-100
  analysisResults Json                @map("analysis_results") // Full analysis JSON
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @default(now()) @updatedAt @map("updated_at")

  // Relationships
  project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  landUseData       LandUseData[]
  changeDetections  ChangeDetection[]

  @@map("SatelliteAnalysis")
  @@index([projectId])
  @@index([analysisDate])
  @@index([overallRisk])
}

// Land Use Classification Data
model LandUseData {
  id                String            @id @default(cuid())
  analysisId        String            @map("analysis_id")
  landUseClass      String            @map("land_use_class")
  area              Decimal           @db.Decimal(10, 2) // Area in hectares
  percentage        Decimal           @db.Decimal(5, 2) // Percentage of total area
  confidence        Decimal           @db.Decimal(3, 2) // 0.00 to 1.00
  carbonStock       Decimal?          @db.Decimal(10, 2) // tCO2/ha
  sequestrationRate Decimal?          @db.Decimal(8, 2) // tCO2/ha/year
  createdAt         DateTime          @default(now()) @map("created_at")

  // Relationships
  analysis SatelliteAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("LandUseData")
  @@index([analysisId])
  @@index([landUseClass])
}

// Change Detection Data
model ChangeDetection {
  id               String            @id @default(cuid())
  analysisId       String            @map("analysis_id")
  fromClass        String            @map("from_class")
  toClass          String            @map("to_class")
  area             Decimal           @db.Decimal(10, 2) // Area changed in hectares
  confidence       Decimal           @db.Decimal(3, 2) // 0.00 to 1.00
  impact           ChangeImpact      // positive, negative, neutral
  carbonImpact     Decimal           @db.Decimal(10, 2) // tCO2 impact
  detectedDate     DateTime          @map("detected_date")
  createdAt        DateTime          @default(now()) @map("created_at")

  // Relationships
  analysis SatelliteAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("ChangeDetection")
  @@index([analysisId])
  @@index([impact])
  @@index([detectedDate])
}

// Document Analysis - AI-powered document parsing results
model DocumentAnalysis {
  id                String                @id @default(cuid())
  projectId         String                @map("project_id")
  fileName          String                @map("file_name")
  fileType          DocumentType          @map("file_type")
  fileSize          Int                   @map("file_size") // Size in bytes
  uploadDate        DateTime              @default(now()) @map("upload_date")
  processingStatus  ProcessingStatus      @map("processing_status")
  documentType      String                @map("document_type") // PDD, Technical_Report, etc.
  confidence        Decimal               @db.Decimal(3, 2) // 0.00 to 1.00
  qualityScore      Int                   @map("quality_score") // 0-100
  extractedData     Json                  @map("extracted_data") // Full extracted data JSON
  analysisResults   Json                  @map("analysis_results") // Analysis results JSON
  createdAt         DateTime              @default(now()) @map("created_at")
  updatedAt         DateTime              @default(now()) @updatedAt @map("updated_at")

  // Relationships
  project           Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  extractedFindings DocumentFinding[]
  complianceChecks  ComplianceCheck[]

  @@map("DocumentAnalysis")
  @@index([projectId])
  @@index([processingStatus])
  @@index([documentType])
  @@index([uploadDate])
}

// Document Findings - Key findings extracted from documents
model DocumentFinding {
  id           String          @id @default(cuid())
  documentId   String          @map("document_id")
  category     FindingCategory @map("finding_category")
  finding      String
  value        String?
  confidence   Decimal         @db.Decimal(3, 2) // 0.00 to 1.00
  pageRefs     Int[]           @map("page_refs") // Array of page references
  createdAt    DateTime        @default(now()) @map("created_at")

  // Relationships
  document DocumentAnalysis @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("DocumentFinding")
  @@index([documentId])
  @@index([category])
}

// Policy Compliance Assessment
model PolicyComplianceAssessment {
  id                    String              @id @default(cuid())
  projectId             String              @map("project_id")
  assessmentDate        DateTime            @default(now()) @map("assessment_date")
  overallRisk           RiskLevel           @map("overall_risk")
  averageScore          Int                 @map("average_score") // 0-100
  totalFrameworks       Int                 @map("total_frameworks")
  compliantFrameworks   Int                 @map("compliant_frameworks")
  assessmentResults     Json                @map("assessment_results") // Full assessment JSON
  recommendations       Json                @map("recommendations") // Recommendations JSON
  nextReviewDate        DateTime            @map("next_review_date")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @default(now()) @updatedAt @map("updated_at")

  // Relationships
  project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  frameworkChecks   FrameworkCompliance[]
  monitoringItems   ComplianceMonitoring[]

  @@map("PolicyComplianceAssessment")
  @@index([projectId])
  @@index([assessmentDate])
  @@index([overallRisk])
  @@index([nextReviewDate])
}

// Framework Compliance - Individual framework compliance status
model FrameworkCompliance {
  id               String                      @id @default(cuid())
  assessmentId     String                      @map("assessment_id")
  frameworkName    String                      @map("framework_name")
  frameworkType    String                      @map("framework_type")
  jurisdiction     String
  complianceStatus ComplianceStatus            @map("compliance_status")
  complianceScore  Int                         @map("compliance_score") // 0-100
  requirementsMet  Int                         @map("requirements_met")
  totalRequirements Int                        @map("total_requirements")
  gaps             String[]                    // Array of compliance gaps
  recommendations  String[]                    // Array of recommendations
  urgentActions    Json                        @map("urgent_actions") // Urgent actions JSON
  createdAt        DateTime                    @default(now()) @map("created_at")

  // Relationships
  assessment PolicyComplianceAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("FrameworkCompliance")
  @@index([assessmentId])
  @@index([frameworkName])
  @@index([complianceStatus])
}

// Compliance Monitoring - Ongoing compliance monitoring
model ComplianceMonitoring {
  id               String                      @id @default(cuid())
  assessmentId     String                      @map("assessment_id")
  indicator        String
  currentValue     String                      @map("current_value")
  threshold        String
  status           MonitoringStatus
  lastChecked      DateTime                    @map("last_checked")
  nextCheck        DateTime                    @map("next_check")
  frequency        String                      // e.g., "Monthly", "Quarterly"
  alertEnabled     Boolean                     @default(true) @map("alert_enabled")
  createdAt        DateTime                    @default(now()) @map("created_at")
  updatedAt        DateTime                    @default(now()) @updatedAt @map("updated_at")

  // Relationships
  assessment PolicyComplianceAssessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@map("ComplianceMonitoring")
  @@index([assessmentId])
  @@index([status])
  @@index([nextCheck])
}

// Compliance Checks - Document compliance verification
model ComplianceCheck {
  id           String             @id @default(cuid())
  documentId   String             @map("document_id")
  standardName String             @map("standard_name")
  compliant    Boolean
  score        Int                // 0-100
  missing      String[]           // Array of missing requirements
  recommendations String[]        // Array of recommendations
  checkDate    DateTime           @default(now()) @map("check_date")
  createdAt    DateTime           @default(now()) @map("created_at")

  // Relationships
  document DocumentAnalysis @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("ComplianceCheck")
  @@index([documentId])
  @@index([standardName])
  @@index([compliant])
}

// Project Timeline and Milestones
model ProjectMilestone {
  id                String            @id @default(cuid())
  projectId         String            @map("project_id")
  phase             String
  title             String
  description       String?
  status            MilestoneStatus
  priority          Priority
  startDate         DateTime          @map("start_date")
  endDate           DateTime          @map("end_date")
  estimatedDuration Int               @map("estimated_duration") // in days
  actualDuration    Int?              @map("actual_duration")
  dependencies      String[]          // Array of milestone IDs
  deliverables      String[]          // Array of deliverable names
  stakeholders      String[]          // Array of stakeholder names
  estimatedCost     Decimal?          @db.Decimal(10, 2) @map("estimated_cost")
  actualCost        Decimal?          @db.Decimal(10, 2) @map("actual_cost")
  risks             Json?             // Risk information as JSON
  kpis              Json?             // KPI information as JSON
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @default(now()) @updatedAt @map("updated_at")

  // Relationships
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("ProjectMilestone")
  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([startDate])
  @@index([endDate])
}

// Impact Measurement and Tracking
model ImpactMeasurement {
  id                  String              @id @default(cuid())
  projectId           String              @map("project_id")
  reportingPeriod     String              @map("reporting_period")
  startDate           DateTime            @map("start_date")
  endDate             DateTime            @map("end_date")
  totalCO2Reduced     Decimal             @db.Decimal(12, 2) @map("total_co2_reduced")
  creditsIssued       Int                 @map("credits_issued")
  socialBeneficiaries Int                 @map("social_beneficiaries")
  economicValue       Decimal             @db.Decimal(15, 2) @map("economic_value")
  biodiversityScore   Decimal             @db.Decimal(5, 2) @map("biodiversity_score")
  verificationStatus  VerificationStatus  @map("verification_status")
  verifier            String?
  verificationDate    DateTime?           @map("verification_date")
  confidence          Decimal             @db.Decimal(3, 2) // 0.00 to 1.00
  sdgAlignment        Json                @map("sdg_alignment") // SDG alignment data
  stakeholderFeedback Json                @map("stakeholder_feedback") // Feedback data
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @default(now()) @updatedAt @map("updated_at")

  // Relationships
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  metrics     ImpactMetric[]

  @@map("ImpactMeasurement")
  @@index([projectId])
  @@index([reportingPeriod])
  @@index([verificationStatus])
  @@index([startDate])
  @@index([endDate])
}

// Individual Impact Metrics
model ImpactMetric {
  id                   String               @id @default(cuid())
  measurementId        String               @map("measurement_id")
  name                 String
  category             MetricCategory       @map("metric_category")
  unit                 String
  target               Decimal              @db.Decimal(15, 4)
  actual               Decimal              @db.Decimal(15, 4)
  baseline             Decimal              @db.Decimal(15, 4)
  trend                Trend
  methodology          String
  verificationStatus   VerificationStatus   @map("verification_status")
  frequency            String               // e.g., "Monthly", "Quarterly"
  dataSource           String               @map("data_source")
  confidence           Decimal              @db.Decimal(3, 2) // 0.00 to 1.00
  lastUpdated          DateTime             @map("last_updated")
  createdAt            DateTime             @default(now()) @map("created_at")

  // Relationships
  measurement ImpactMeasurement @relation(fields: [measurementId], references: [id], onDelete: Cascade)

  @@map("ImpactMetric")
  @@index([measurementId])
  @@index([category])
  @@index([verificationStatus])
  @@index([lastUpdated])
}

// Cache Management for Performance
model CacheEntry {
  id          String    @id @default(cuid())
  key         String    @unique
  value       Json
  ttl         DateTime  // Time to live
  tags        String[]  // Array of cache tags for invalidation
  hitCount    Int       @default(0) @map("hit_count")
  createdAt   DateTime  @default(now()) @map("created_at")
  lastHit     DateTime? @map("last_hit")

  @@map("CacheEntry")
  @@index([key])
  @@index([ttl])
  @@index([tags])
}

// System Audit Log
model AuditLog {
  id          String      @id @default(cuid())
  userId      String?     @map("user_id")
  action      String
  entity      String
  entityId    String      @map("entity_id")
  oldValues   Json?       @map("old_values")
  newValues   Json?       @map("new_values")
  metadata    Json?       // Additional metadata
  ipAddress   String?     @map("ip_address")
  userAgent   String?     @map("user_agent")
  timestamp   DateTime    @default(now())

  @@map("AuditLog")
  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([entityId])
  @@index([timestamp])
}

// Enums
enum UserProfileType {
  LANDOWNER
  INVESTOR
  POLICY_ANALYST
  PROJECT_DEVELOPER
  CONSULTANT
  VALIDATOR
  BROKER
  RESEARCHER

  @@map("user_profile_type")
}

enum ProjectType {
  AFOLU // Agriculture, Forestry and Other Land Use
  ENERGY
  TRANSPORT
  MANUFACTURING
  WASTE
  BUILDINGS
  OTHER

  @@map("project_type")
}

enum ProjectStatus {
  PLANNING
  DESIGN
  VALIDATION
  IMPLEMENTATION
  MONITORING
  VERIFICATION
  COMPLETED
  CANCELLED

  @@map("project_status")
}

enum RiskType {
  PHYSICAL
  TRANSITIONAL
  REGULATORY
  MARKET
  OPERATIONAL
  REPUTATIONAL

  @@map("risk_type")
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@map("risk_level")
}

enum PolicyType {
  REGULATION
  STANDARD
  INCENTIVE
  TAX
  SUBSIDY
  MANDATE
  VOLUNTARY
  INTERNATIONAL_AGREEMENT

  @@map("policy_type")
}

enum PolicyStatus {
  DRAFT
  PROPOSED
  ACTIVE
  AMENDED
  EXPIRED
  REPEALED

  @@map("policy_status")
}

// New Enums for Enhanced Features

enum ChangeImpact {
  POSITIVE
  NEGATIVE
  NEUTRAL

  @@map("change_impact")
}

enum DocumentType {
  PDF
  WORD
  EXCEL
  IMAGE
  TEXT

  @@map("document_type")
}

enum ProcessingStatus {
  UPLOADED
  PROCESSING
  ANALYZED
  ERROR

  @@map("processing_status")
}

enum FindingCategory {
  METHODOLOGY
  LOCATION
  CREDITS
  TIMELINE
  BUDGET
  RISKS
  STAKEHOLDERS
  COMPLIANCE

  @@map("finding_category")
}

enum ComplianceStatus {
  COMPLIANT
  PARTIALLY_COMPLIANT
  NON_COMPLIANT
  NOT_APPLICABLE

  @@map("compliance_status")
}

enum MonitoringStatus {
  GOOD
  WARNING
  CRITICAL

  @@map("monitoring_status")
}

enum MilestoneStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DELAYED
  BLOCKED

  @@map("milestone_status")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@map("priority")
}

enum VerificationStatus {
  VERIFIED
  PENDING
  UNVERIFIED
  FAILED

  @@map("verification_status")
}

enum MetricCategory {
  ENVIRONMENTAL
  SOCIAL
  ECONOMIC
  GOVERNANCE

  @@map("metric_category")
}

enum Trend {
  INCREASING
  DECREASING
  STABLE

  @@map("trend")
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER

  @@map("organization_role")
}
